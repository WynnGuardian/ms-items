// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: authenticated_item.sql

package db

import (
	"context"
	"time"
)

const createAuthenticatedItem = `-- name: CreateAuthenticatedItem :exec
INSERT INTO WG_AuthenticatedItems (Id, LastRanked, ItemName, OwnerMCUUID, OwnerUserId, Weight, TrackingCode, OwnerPublic, Bytes, Position) VALUES (?,?,?,?,?,?,?,?,?,?)
`

type CreateAuthenticatedItemParams struct {
	ID           string    `json:"id"`
	Lastranked   time.Time `json:"lastranked"`
	Itemname     string    `json:"itemname"`
	Ownermcuuid  string    `json:"ownermcuuid"`
	Owneruserid  string    `json:"owneruserid"`
	Weight       float64   `json:"weight"`
	Trackingcode string    `json:"trackingcode"`
	Ownerpublic  int32     `json:"ownerpublic"`
	Bytes        string    `json:"bytes"`
	Position     int32     `json:"position"`
}

func (q *Queries) CreateAuthenticatedItem(ctx context.Context, arg CreateAuthenticatedItemParams) error {
	_, err := q.db.ExecContext(ctx, createAuthenticatedItem,
		arg.ID,
		arg.Lastranked,
		arg.Itemname,
		arg.Ownermcuuid,
		arg.Owneruserid,
		arg.Weight,
		arg.Trackingcode,
		arg.Ownerpublic,
		arg.Bytes,
		arg.Position,
	)
	return err
}

const findAllAuthenticatedItemNames = `-- name: FindAllAuthenticatedItemNames :many
SELECT DISTINCT ItemName FROM WG_AuthenticatedItems
`

func (q *Queries) FindAllAuthenticatedItemNames(ctx context.Context) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, findAllAuthenticatedItemNames)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var itemname string
		if err := rows.Scan(&itemname); err != nil {
			return nil, err
		}
		items = append(items, itemname)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findAuthenticatedItem = `-- name: FindAuthenticatedItem :one
SELECT id, lastranked, itemname, position, ownermcuuid, owneruserid, weight, trackingcode, ownerpublic, bytes FROM WG_AuthenticatedItems WHERE Id = ? OR TrackingCode = ?
`

type FindAuthenticatedItemParams struct {
	Code string `json:"code"`
}

func (q *Queries) FindAuthenticatedItem(ctx context.Context, arg FindAuthenticatedItemParams) (WgAuthenticateditem, error) {
	row := q.db.QueryRowContext(ctx, findAuthenticatedItem, arg.Code, arg.Code)
	var i WgAuthenticateditem
	err := row.Scan(
		&i.ID,
		&i.Lastranked,
		&i.Itemname,
		&i.Position,
		&i.Ownermcuuid,
		&i.Owneruserid,
		&i.Weight,
		&i.Trackingcode,
		&i.Ownerpublic,
		&i.Bytes,
	)
	return i, err
}

const findAuthenticatedItemStats = `-- name: FindAuthenticatedItemStats :many
SELECT itemid, statid, value FROM WG_AuthenticatedItemStats WHERE ItemId = ? OR ItemId = ?
`

type FindAuthenticatedItemStatsParams struct {
	Code string `json:"code"`
}

func (q *Queries) FindAuthenticatedItemStats(ctx context.Context, arg FindAuthenticatedItemStatsParams) ([]WgAuthenticateditemstat, error) {
	rows, err := q.db.QueryContext(ctx, findAuthenticatedItemStats, arg.Code, arg.Code)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WgAuthenticateditemstat
	for rows.Next() {
		var i WgAuthenticateditemstat
		if err := rows.Scan(&i.Itemid, &i.Statid, &i.Value); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const findWithBytes = `-- name: FindWithBytes :one
SELECT id, lastranked, itemname, position, ownermcuuid, owneruserid, weight, trackingcode, ownerpublic, bytes FROM WG_AuthenticatedItems WHERE Bytes = ? LIMIT 1
`

func (q *Queries) FindWithBytes(ctx context.Context, bytes string) (WgAuthenticateditem, error) {
	row := q.db.QueryRowContext(ctx, findWithBytes, bytes)
	var i WgAuthenticateditem
	err := row.Scan(
		&i.ID,
		&i.Lastranked,
		&i.Itemname,
		&i.Position,
		&i.Ownermcuuid,
		&i.Owneruserid,
		&i.Weight,
		&i.Trackingcode,
		&i.Ownerpublic,
		&i.Bytes,
	)
	return i, err
}

const findWynnItemAuthenticatedItems = `-- name: FindWynnItemAuthenticatedItems :many
SELECT id, lastranked, itemname, position, ownermcuuid, owneruserid, weight, trackingcode, ownerpublic, bytes FROM WG_AuthenticatedItems WHERE ItemName = ?
`

func (q *Queries) FindWynnItemAuthenticatedItems(ctx context.Context, itemname string) ([]WgAuthenticateditem, error) {
	rows, err := q.db.QueryContext(ctx, findWynnItemAuthenticatedItems, itemname)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WgAuthenticateditem
	for rows.Next() {
		var i WgAuthenticateditem
		if err := rows.Scan(
			&i.ID,
			&i.Lastranked,
			&i.Itemname,
			&i.Position,
			&i.Ownermcuuid,
			&i.Owneruserid,
			&i.Weight,
			&i.Trackingcode,
			&i.Ownerpublic,
			&i.Bytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const rankAuthenticatedItems = `-- name: RankAuthenticatedItems :many
SELECT id, lastranked, itemname, position, ownermcuuid, owneruserid, weight, trackingcode, ownerpublic, bytes FROM WG_AuthenticatedItems WHERE ItemName = ? ORDER BY Position ASC LIMIT ? OFFSET ?
`

type RankAuthenticatedItemsParams struct {
	Itemname string `json:"itemname"`
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
}

func (q *Queries) RankAuthenticatedItems(ctx context.Context, arg RankAuthenticatedItemsParams) ([]WgAuthenticateditem, error) {
	rows, err := q.db.QueryContext(ctx, rankAuthenticatedItems, arg.Itemname, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []WgAuthenticateditem
	for rows.Next() {
		var i WgAuthenticateditem
		if err := rows.Scan(
			&i.ID,
			&i.Lastranked,
			&i.Itemname,
			&i.Position,
			&i.Ownermcuuid,
			&i.Owneruserid,
			&i.Weight,
			&i.Trackingcode,
			&i.Ownerpublic,
			&i.Bytes,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAuthenticatedItem = `-- name: UpdateAuthenticatedItem :exec
UPDATE WG_AuthenticatedItems SET LastRanked = ?, Position = ?, OwnerMCUUID = ?, OwnerUserId = ?,  Weight = ?, OwnerPublic = ?, Bytes = ? WHERE Id = ? OR TrackingCode = ?
`

type UpdateAuthenticatedItemParams struct {
	Lastranked   time.Time `json:"lastranked"`
	Position     int32     `json:"position"`
	Ownermcuuid  string    `json:"ownermcuuid"`
	Owneruserid  string    `json:"owneruserid"`
	Weight       float64   `json:"weight"`
	Ownerpublic  int32     `json:"ownerpublic"`
	Bytes        string    `json:"bytes"`
	ID           string    `json:"id"`
	Trackingcode string    `json:"trackingcode"`
}

func (q *Queries) UpdateAuthenticatedItem(ctx context.Context, arg UpdateAuthenticatedItemParams) error {
	_, err := q.db.ExecContext(ctx, updateAuthenticatedItem,
		arg.Lastranked,
		arg.Position,
		arg.Ownermcuuid,
		arg.Owneruserid,
		arg.Weight,
		arg.Ownerpublic,
		arg.Bytes,
		arg.ID,
		arg.Trackingcode,
	)
	return err
}
